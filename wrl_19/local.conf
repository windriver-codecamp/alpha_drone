#
# This file is your local configuration file and is where all local user settings
# are placed. The comments in this file give some guide to the options a new user
# to the system might want to change but pretty much any configuration option can
# be set in this file. More adventurous users can look at local.conf.extended
# which contains other examples of configuration which can be placed in this file
# but new users likely won't need any of them initially.
#
# Lines starting with the '#' character are commented out and in some cases the
# default values are provided as comments to show people example syntax. Enabling
# the option is a question of removing the # character and making any change to the
# variable as required.

#
# Network Control
#
# Disable bitbake from being able to access the network
BB_NO_NETWORK ?= '1'

# Only allow downloads from PREMIRRORs, not search the main SRC_URI or MIRRORS.
# If you have enabled download (dl-layers), use this to restrict fetch to those
# layers. This also has a side effect of telling the system to ensure the
# fetched repositories from the local download layer (pre)mirrors are
# up-to-date.
BB_FETCH_PREMIRRORONLY ?= '${@d.getVar('BB_NO_NETWORK') or 0}'

#
# Wind River Linux Templates
#
# The following variables control the template inclusion mechanism.
#
# Specify templates you wish to use in a space separated list.
WRTEMPLATE ?= ""

# If you want to disable one or more templates
# Note: this matches the 'end' of any templates that were found.. so you can do
# things like:
#
#  default (skip all default templates)
#  feature/foobar (skip all layers feature/foobar)
#  wr-base/feature/foobar (skip only feature/foobar in wr-base)
#WRTEMPLATE_SKIP = "feautre/item3 feature/item4 ..."

# Selectively enable or disable the template 'image.inc' additions to a given
# image recipe.
# (the default value is 1)
#WRTEMPLATE_IMAGE_pn-<recipe> = "0"

# Disable or enable processing of the special 'bsp-pkgs.*' template pieces.
# (the default value is 1)
#WRTEMPLATE_BSP_PKG = "0"

#
# Machine Selection
#
# You need to select a specific machine to target the build with.
# Some machines are emulated, usually the name starts with qemu, these can boot
# and run in the QEMU emulator:
#
# aarch32-tc
#MACHINE ?= "aarch32-tc"
# aarch64-tc
#MACHINE ?= "aarch64-tc"
# AMD snowyowl systems
#MACHINE ?= "amd-snowyowl"
# arm-rm-tc
#MACHINE ?= "arm-rm-tc"
# a bcm-2xxx-rpi
#MACHINE ?= "bcm-2xxx-rpi4"
# Reference machine configuration for http://beagleboard.org/bone and http://beagleboard.org/black boards
#MACHINE ?= "beaglebone-yocto"
# cortexa53-zynqmp
#MACHINE ?= "cortexa53-zynqmp"
# cortexa72-versal
#MACHINE ?= "cortexa72-versal"
# cortexa9-zynq
#MACHINE ?= "cortexa9-zynq"
# cortexr5-versal
#MACHINE ?= "cortexr5-versal"
# cortexr5-zynqmp
#MACHINE ?= "cortexr5-zynqmp"
# a generic edgerouter
#MACHINE ?= "edgerouter"
# generic x86 (32-bit) PCs. Supports a moderately wide range of drivers that should boot and be usable on "typical" hardware.
#MACHINE ?= "genericx86"
# generic x86_64 (64-bit) PCs and servers. Supports a moderately wide range of drivers that should boot and be usable on "typical" hardware.
#MACHINE ?= "genericx86-64"
# NXP i.MX23 Evaluation Kit
#MACHINE ?= "imx23evk"
# NXP i.MX25 Evaluation Kit
#MACHINE ?= "imx25pdk"
# NXP i.MX28 Evaluation Kit
#MACHINE ?= "imx28evk"
# NXP i.MX51 Evaluation Kit
#MACHINE ?= "imx51evk"
# NXP i.MX53 SABRE Automotive Board
#MACHINE ?= "imx53ard"
# NXP i.MX53 Quick Start Board
#MACHINE ?= "imx53qsb"
# NXP i.MX6QP/Q/DL SABRE Automotive
#MACHINE ?= "imx6qdlsabreauto"
# NXP i.MX6QP/Q/DL SABRE Smart Device
#MACHINE ?= "imx6qdlsabresd"
# NXP i.MX6SL Evaluation Kit
#MACHINE ?= "imx6slevk"
# NXP i.MX6SLL EVK
#MACHINE ?= "imx6sllevk"
# NXP i.MX6SoloX Sabre Automotive
#MACHINE ?= "imx6sxsabreauto"
# NXP i.MX6SoloX Sabre SD
#MACHINE ?= "imx6sxsabresd"
# NXP i.MX6UL EVK
#MACHINE ?= "imx6ulevk"
# NXP i.MX6ULL EVK
#MACHINE ?= "imx6ullevk"
# NXP i.MX7D SABRE Smart Device
#MACHINE ?= "imx7dsabresd"
# NXP i.MX7ULP EVK
#MACHINE ?= "imx7ulpevk"
# NXP i.MX8MMini LPDDR4 EVK and i.MX8MMini DDR4 EVK
#MACHINE ?= "imx8mmevk"
# NXP i.MX8MQ EVK
#MACHINE ?= "imx8mqevk"
# i.MX 8QuadMax MEK board
#MACHINE ?= "imx8qmmek"
# i.MX 8QXP Multisensory Enablement Kit (MEK) board
#MACHINE ?= "imx8qxpmek"
# 32 bit Intel Core 2 CPU (and later) with MMX, SSE, SSE2, SSE3, and SSSE3 instruction set support. Supports a moderately wide range of drivers that should boot and be usable on "typical" hardware.
#MACHINE ?= "intel-core2-32"
# 64 bit Intel Core i7 CPU (and later) with MMX, SSE, SSE2, SSE3, and SSSE3 instruction set support. Supports a moderately wide range of drivers that should boot and be usable on "typical" hardware.
#MACHINE ?= "intel-corei7-64"
# Intel Haswell CPU (64bit)
#MACHINE ?= "intel-haswell-64"
# 64 bit Intel Skylake CPU (and later) with MMX, SSE, SSE2, SSE3, SSE4.1, SSE4.2, AVX, and AVX2 instruction set support. Supports a moderately wide range of drivers that should boot and be usable on "typical" hardware.
#MACHINE ?= "intel-skylake-64"
# Intel Skylake CPU (64bit) with AVX-512 enabled
#MACHINE ?= "intel-skylake-avx512-64"
# Intel Stratix 10 SoC
#MACHINE ?= "intel-socfpga-64"
# Intel X86 (64bit) PCs and servers
#MACHINE ?= "intel-x86-64"
# Machine support for Xilinx KC705 Embedded Kit.
#MACHINE ?= "kc705-microblazeel"
# NXP QorIQ LS1012AFRWY
#MACHINE ?= "ls1012afrwy"
# NXP QorIQ LS1012ARDB
#MACHINE ?= "ls1012ardb"
# NXP QorIQ LS1 Tower System
#MACHINE ?= "ls1021atwr"
# LS1028ARDB in 64-bit mode
#MACHINE ?= "ls1028ardb"
# NXP QorIQ LS1043ARDB
#MACHINE ?= "ls1043ardb"
# LS1046A in 64-bit mode
#MACHINE ?= "ls1046afrwy"
# LS1046A in 64-bit mode
#MACHINE ?= "ls1046ardb"
# LS1088ARDB in 64-bit mode
#MACHINE ?= "ls1088ardb"
# LS1088ARDB in 64-bit mode
#MACHINE ?= "ls1088ardb-pb"
# NXP QorIQ LS2080ARDB
#MACHINE ?= "ls2080ardb"
# LS2088ARDB in 64-bit mode
#MACHINE ?= "ls2088ardb"
# LX2160ARDB in 64-bit mode
#MACHINE ?= "lx2160ardb"
# Marvell CN96xx SoC
#MACHINE ?= "marvell-cn96xx"
# microblaze-plm
#MACHINE ?= "microblaze-plm"
# microblaze-pmu
#MACHINE ?= "microblaze-pmu"
# microblaze-tc
#MACHINE ?= "microblaze-tc"
# Machine support for microZed. (http://www.microzed.org/)
#MACHINE ?= "microzed-zynq7"
# MicroBlaze QEMU machine support ('petalogix-ml605' model)
#MACHINE ?= "ml605-qemu-microblazeel"
# Freescale MPC8315E-RDB
#MACHINE ?= "mpc8315e-rdb"
# NXP MPC8548CDS
#MACHINE ?= "mpc8548cds"
# NXP i.MX 6Quad and i.MX 6Solox SoC
#MACHINE ?= "nxp-imx6"
# nxp-imx8
#MACHINE ?= "nxp-imx8"
# NXP QorIQ Layerscape 1028A SoC
#MACHINE ?= "nxp-ls1028"
# a nxp-ls1043
#MACHINE ?= "nxp-ls1043"
# a nxp-ls1046
#MACHINE ?= "nxp-ls1046"
# NXP QorIQ Layerscape 2088A SoC
#MACHINE ?= "nxp-ls20xx"
# NXP Layerscape LX2160A SoC
#MACHINE ?= "nxp-lx2xxx"
# NXP S32G274A SoC
#MACHINE ?= "nxp-s32g2xx"
# NXP QorIQ P1020 Reference
#MACHINE ?= "p1020rdb"
# NXP QorIQ P2020 Reference
#MACHINE ?= "p2020rdb"
# NXP QorIQ P2041 Reference
#MACHINE ?= "p2041rdb"
# NXP QorIQ P3041 Development
#MACHINE ?= "p3041ds"
# NXP QorIQ P4080 Development
#MACHINE ?= "p4080ds"
# NXP QorIQ P5040 Development
#MACHINE ?= "p5040ds"
# Freescale QorIQ P5040 Development
#MACHINE ?= "p5040ds-64b"
# Machine support for picoZed. (http://www.picozed.org/)
#MACHINE ?= "picozed-zynq7"
# Zynq QEMU machine support ('xilinx-zynq-a9' model)
#MACHINE ?= "qemu-zynq7"
# ARMv7 system on QEMU
#MACHINE ?= "qemuarm"
# ARMv8 system on QEMU
#MACHINE ?= "qemuarm64"
# qemuarma9
#MACHINE ?= "qemuarma9"
# ARMv5 system on QEMU
#MACHINE ?= "qemuarmv5"
# a MIPS system on QEMU
#MACHINE ?= "qemumips"
# a MIPS64 system on QEMU
#MACHINE ?= "qemumips64"
# a PPC system on QEMU
#MACHINE ?= "qemuppc"
# a generic riscv64
#MACHINE ?= "qemuriscv64"
# x86 system on QEMU
#MACHINE ?= "qemux86"
# x86-64 system on QEMU
#MACHINE ?= "qemux86-64"
# Renesas R-Car H3 SoC
#MACHINE ?= "renesas-rcar-h3"
# Renesas R-Car M3 SoC
#MACHINE ?= "renesas-rcar-m3"
# MicroBlaze QEMU machine support ('petalogix-s3adsp1800' model)
#MACHINE ?= "s3adsp1800-qemu-microblazeeb"
# Machine supporting the architectures in the ZCU102 evaluation board.
#MACHINE ?= "system-zcu102"
# NXP QorIQ T1024 Reference
#MACHINE ?= "t1024rdb"
# Freescale QorIQ T1024 Reference
#MACHINE ?= "t1024rdb-64b"
# NXP QorIQ T1042D4 Reference
#MACHINE ?= "t1042d4rdb"
# NXP QorIQ T1042D4 Reference
#MACHINE ?= "t1042d4rdb-64b"
# NXP QorIQ T2080 Reference
#MACHINE ?= "t2080rdb"
# Freescale QorIQ T2080 Reference
#MACHINE ?= "t2080rdb-64b"
# NXP QorIQ T4240 Reference
#MACHINE ?= "t4240rdb"
# Freescale QorIQ T4240 Reference
#MACHINE ?= "t4240rdb-64b"
# TI AM335x SoC
#MACHINE ?= "ti-am335x"
# Machine support for Ultra96 Evaluation Board.
#MACHINE ?= "ultra96-zynqmp"
# v350-versal
#MACHINE ?= "v350-versal"
# vc-p-a2197-versal
#MACHINE ?= "vc-p-a2197-00-versal"
# vck-sc-zynqmp
#MACHINE ?= "vck-sc-zynqmp"
# vck-versal
#MACHINE ?= "vck190-versal"
# versal devices
#MACHINE ?= "versal-generic"
# versal-mb
#MACHINE ?= "versal-mb"
# vmk180-versal
#MACHINE ?= "vmk180-versal"
# Xilinx Zynq-7000 SoC
#MACHINE ?= "xilinx-zynq"
# Zynq Ultrascale+ MPSoC
#MACHINE ?= "xilinx-zynqmp"
# Machine support for ZC1254 Evaluation Board.
#MACHINE ?= "zc1254-zynqmp"
# Machine support for ZC702 Evaluation Board.
#MACHINE ?= "zc702-zynq7"
# Machine support for ZC706 Evaluation Board.
#MACHINE ?= "zc706-zynq7"
# Machine support for ZCU102 Evaluation Board.
#MACHINE ?= "zcu102-zynqmp"
# Machine support for ZCU104 Evaluation Board.
#MACHINE ?= "zcu104-zynqmp"
# Machine support for ZCU106 Evaluation Board.
#MACHINE ?= "zcu106-zynqmp"
# Machine support for ZCU111 Evaluation Board.
#MACHINE ?= "zcu111-zynqmp"
# Machine support for ZCU1275 Evaluation Board.
#MACHINE ?= "zcu1275-zynqmp"
# Machine support for ZCU1285 Evaluation Board.
#MACHINE ?= "zcu1285-zynqmp"
# Machine support for ZCU208 Evaluation Board.
#MACHINE ?= "zcu208-zynqmp"
# Machine support for ZCU216 Evaluation Board.
#MACHINE ?= "zcu216-zynqmp"
# Machine support for ZedBoard. (http://www.zedboard.org/)
#MACHINE ?= "zedboard-zynq7"
# Machine support for zybo-linux-bd project.
#MACHINE ?= "zybo-linux-bd-zynq7"
# Machine support for ZYBO.
#MACHINE ?= "zybo-zynq7"
# Generic Zynq Device
#MACHINE ?= "zynq-generic"
# zynqmp devices
#MACHINE ?= "zynqmp-generic"
#
# This sets the default machine if no other machine has been selected:
MACHINE ??= "qemux86-64"

#
# Linux Kernel Type
#
# The kernel type is selected by the recipe that provides the kernel.
# By default, this recipe is selected by the DISTRO.
#
# If you want to override the default kernel, you must select the desired
# recipe via PREFERRED_PROVIDER_virtual/kernel.
#
# To select a specific kernel recipe, uncomment the line below
# and set the value.
#
# Typical values include: linux-yocto, linux-yocto-rt, and linux-yocto-tiny
#
#PREFERRED_PROVIDER_virtual/kernel = "linux-yocto"

#
# Where to place downloads
#
# During a first build the system will download many different source code tarballs
# from various upstream projects. This can take a while, particularly if your network
# connection is slow. These are all stored in DL_DIR. When wiping and rebuilding you
# can preserve this directory to speed up this part of subsequent builds. This directory
# is safe to share between multiple builds on the same machine too.
#
# The default is a downloads directory under TOPDIR which is the build directory.
#
#DL_DIR ?= "${TOPDIR}/downloads"

#
# Where to place shared-state files
#
# BitBake has the capability to accelerate builds based on previously built output.
# This is done using "shared state" files which can be thought of as cache objects
# and this option determines where those files are placed.
#
# You can wipe out TMPDIR leaving this directory intact and the build would regenerate
# from these files if no changes were made to the configuration. If changes were made
# to the configuration, only shared state files where the state was still valid would
# be used (done using checksums).
#
# The default is a sstate-cache directory under TOPDIR.
#
#SSTATE_DIR ?= "${TOPDIR}/sstate-cache"

#
# Where to place the build output
#
# This option specifies where the bulk of the building work should be done and
# where BitBake should place its temporary files and output. Keep in mind that
# this includes the extraction and compilation of many applications and the toolchain
# which can use Gigabytes of hard disk space.
#
# The default is a tmp directory under TOPDIR.
#
#TMPDIR = "${TOPDIR}/tmp"

#
# Default policy config
#
# The distribution setting controls which policy settings are used as defaults.
# The default value is fine for general Yocto project use, at least initially.
# Ultimately when creating custom policy, people will likely end up subclassing 
# these defaults.
#
# OpenEmbedded
#DISTRO ?= "anaconda"
# OpenEmbedded
#DISTRO ?= "nodistro"
# overc
#DISTRO ?= "overc"
# Poky (Yocto Project Reference Distro)
#DISTRO ?= "poky"
# Poky (Yocto Project Reference Distro)
#DISTRO ?= "poky-altcfg"
# Poky (Yocto Project Reference Distro)
#DISTRO ?= "poky-bleeding"
# poky-cgl
#DISTRO ?= "poky-cgl"
# Poky (Yocto Project Reference Distro)
#DISTRO ?= "poky-tiny"
# Wind River Linux Base
#DISTRO ?= "wrlinux"
# Wind River Linux CGL
#DISTRO ?= "wrlinux-cgl"
# Wind River Linuxtiny Base
#DISTRO ?= "wrlinux-graphics"
# Wind River Linux (Anaconda-based Target Installer)
#DISTRO ?= "wrlinux-installer"
# Wind River Linux OverC
#DISTRO ?= "wrlinux-overc"
# Wind River Linux OVP
#DISTRO ?= "wrlinux-ovp"
# Wind River Linux Base
#DISTRO ?= "wrlinux-std-sato"
# Wind River Linuxtiny Base
#DISTRO ?= "wrlinux-tiny"
#
# This sets the default distro if no other distro has been selected:
DISTRO ??= "wrlinux-graphics"

#
# Package Management configuration
#
# This variable lists which packaging formats to enable. Multiple package backends
# can be enabled at once and the first item listed in the variable will be used
# to generate the root filesystems.
# Options are:
#  - 'package_deb' for debian style deb files
#  - 'package_ipk' for ipk files are used by opkg (a debian style embedded package manager)
#  - 'package_rpm' for rpm style packages
# E.g.: PACKAGE_CLASSES ?= "package_rpm package_deb package_ipk"
# We default to rpm:
PACKAGE_CLASSES ?= "package_rpm"

#
# SDK target architecture
#
# This variable specifies the architecture to build SDK items for and means
# you can build the SDK packages for architectures other than the machine you are
# running the build on (i.e. building i686 packages on an x86_64 host).
# Supported values are i686 and x86_64
#SDKMACHINE ?= "i686"

#
# Extra image configuration defaults
#
# The EXTRA_IMAGE_FEATURES variable allows extra packages to be added to the generated
# images. Some of these options are added to certain image types automatically. The
# variable can contain the following options:
#  "dbg-pkgs"       - add -dbg packages for all installed packages
#                     (adds symbol information for debugging/profiling)
#  "src-pkgs"       - add -src packages for all installed packages
#                     (adds source code for debugging)
#  "dev-pkgs"       - add -dev packages for all installed packages
#                     (useful if you want to develop against libs in the image)
#  "ptest-pkgs"     - add -ptest packages for all ptest-enabled packages
#                     (useful if you want to run the package test suites)
#  "tools-sdk"      - add development tools (gcc, make, pkgconfig etc.)
#  "tools-debug"    - add debugging tools (gdb, strace)
#  "eclipse-debug"  - add Eclipse remote debugging support
#  "tools-profile"  - add profiling tools (oprofile, lttng, valgrind)
#  "tools-testapps" - add useful testing tools (ts_print, aplay, arecord etc.)
#  "debug-tweaks"   - make an image suitable for development
#                     e.g. ssh root access has a blank password
# There are other application targets that can be used here too, see
# meta/classes/image.bbclass and meta/classes/core-image.bbclass for more details.
# We default to enabling the debugging tweaks.
EXTRA_IMAGE_FEATURES ?= "debug-tweaks"

#
# Additional image features
#
# The following is a list of additional classes to use when building images which
# enable extra features. Some available options which can be included in this variable
# are:
#   - 'buildstats' collect build statistics
#   - 'image-mklibs' to reduce shared library files size for an image
#   - 'image-prelink' in order to prelink the filesystem image
# NOTE: if listing mklibs & prelink both, then make sure mklibs is before prelink
# NOTE: mklibs also needs to be explicitly enabled for a given image, see local.conf.extended
USER_CLASSES ?= "buildstats image-mklibs image-prelink"

#
# Additional rootfs image types
#
# The following is a partial list of additional image filesystem types that
# may be supported by the configured machine;
#   - 'tar.gz' to create a gzip compressed tarball of the image
#   - 'tar.bz2' to create a bz2 compressed tarball of the image
#   - 'ext4' to create an ext4 image
#
# NOTE:
# Due to the way the OpenEmbedded build system processes this variable,
# you cannot update its contents by using _append or _prepend. You must use
# the += operator to add one or more options to the IMAGE_FSTYPES variable.
IMAGE_FSTYPES += "tar.bz2"

# The following options will build a companion 'debug filesystem' in addition
# to the normal deployable filesystem.  This companion system allows a
# debugger to know the symbols and related sources.  It can be used to
# debug a remote 'production' system without having to add the debug symbols
# and sources to remote system.  If IMAGE_FSTYPES_DEBUGFS is not defined, it
# defaults to IMAGE_FSTYPES.
#IMAGE_GEN_DEBUGFS = "1"
#IMAGE_FSTYPES_DEBUGFS = "tar.bz2"

# The network based PR service host and port
# Uncomment the following lines to enable PRservice.
# Set PRSERV_HOST to 'localhost:0' to automatically
# start local PRService.
# Set to other values to use remote PRService.
#PRSERV_HOST = "localhost:0"

#
# Runtime testing of images
#
# The build system can test booting virtual machine images under qemu (an emulator)
# after any root filesystems are created and run tests against those images. It can also
# run tests against any SDK that are built. To enable this uncomment these lines.
# See classes/test{image,sdk}.bbclass for further details.
#IMAGE_CLASSES += "testimage testsdk"
#TESTIMAGE_AUTO_qemuall = "1"
# Note: test image requires sshd and scp support on the target, this can be added by
# adding one of the following two lines.
#IMAGE_INSTALL_append = " openssh-sshd openssh-scp"
#IMAGE_INSTALL_append = " dropbear"

#
# Interactive shell configuration
#
# Under certain circumstances the system may need input from you and to do this it
# can launch an interactive shell. It needs to do this since the build is
# multithreaded and needs to be able to handle the case where more than one parallel
# process may require the user's attention. The default is iterate over the available
# terminal types to find one that works.
#
# Examples of the occasions this may happen are when resolving patches which cannot
# be applied, to use the devshell or the kernel menuconfig
#
# Supported values are auto, gnome, xfce, rxvt, screen, konsole (KDE 3.x only), none
# Note: currently, Konsole support only works for KDE 3.x due to the way
# newer Konsole versions behave
#OE_TERMINAL = "auto"
# By default disable interactive patch resolution (tasks will just fail instead):
PATCHRESOLVE = "noop"

#
# Disk Space Monitoring during the build
#
# Monitor the disk space during the build. If there is less that 1GB of space or less
# than 100K inodes in any key build location (TMPDIR, DL_DIR, SSTATE_DIR), gracefully
# shutdown the build. If there is less that 100MB or 1K inodes, perform a hard abort
# of the build. The reason for this is that running completely out of space can corrupt
# files and damages the build in ways which may not be easily recoverable.
# It's necesary to monitor /tmp, if there is no space left the build will fail
# with very exotic errors.
BB_DISKMON_DIRS ??= "\
    STOPTASKS,${TMPDIR},1G,100K \
    STOPTASKS,${DL_DIR},1G,100K \
    STOPTASKS,${SSTATE_DIR},1G,100K \
    STOPTASKS,/tmp,100M,100K \
    ABORT,${TMPDIR},100M,1K \
    ABORT,${DL_DIR},100M,1K \
    ABORT,${SSTATE_DIR},100M,1K \
    ABORT,/tmp,10M,1K"

#
# Shared-state files from other locations
#
# As mentioned above, shared state files are prebuilt cache data objects which can
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the
# cache locations to check for the shared objects.
# NOTE: if the mirror uses the same structure as SSTATE_DIR, you need to add PATH
# at the end as shown in the examples below. This will be substituted with the
# correct path within the directory structure.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/PATH;downloadfilename=PATH \n \
#file://.* file:///some/local/dir/sstate/PATH"
#
# Make sstate can be downloaded from network when BB_NO_NETWORK is set to 1
#SSTATE_MIRROR_ALLOW_NETWORK ?= "1"

# Select the default init manager
# use systemd as the default init manager
DISTRO_FEATURES_append = " systemd"
DISTRO_FEATURES_BACKFILL_CONSIDERED += "sysvinit"
VIRTUAL-RUNTIME_init_manager = "systemd"
VIRTUAL-RUNTIME_initscripts = "systemd-compat-units"
KERNEL_FEATURES_append = " cfg/systemd.scc"

# use sysvinit as the default init manager
#DISTRO_FEATURES_append = " sysvinit"
#DISTRO_FEATURES_BACKFILL_CONSIDERED += "systemd"
#VIRTUAL-RUNTIME_init_manager = "sysvinit"
#VIRTUAL-RUNTIME_initscripts = "initscripts"

#
# Qemu configuration
#
# By default qemu will build with a builtin VNC server where graphical output can be
# seen. The two lines below enable the SDL backend too. By default libsdl2-native will
# be built, if you want to use your host's libSDL instead of the minimal libsdl built
# by libsdl2-native then uncomment the ASSUME_PROVIDED line below.
PACKAGECONFIG_append_pn-qemu-system-native = " sdl"
PACKAGECONFIG_append_pn-nativesdk-qemu = " sdl"
#ASSUME_PROVIDED += "libsdl2-native"

# CONF_VERSION is increased each time build/conf/ changes incompatibly and is used to
# track the version of this file when it was generated. This can safely be ignored if
# this doesn't mean anything to you.
CONF_VERSION = "1"

# The overrides osv-wrlinux will enable wrlinux specific bbappend
OVERRIDES_append = ":osv-wrlinux"

# Add WRLinux uninative support
require wrlinux-distro/conf/distro/include/wrlinux-uninative.inc

# below is jetson nano
BB_NO_NETWORK = '0'
INHERIT_DISTRO_remove = "whitelist"
MACHINE='jetson-nano-qspi-sd'
GCCVERSION = "7.%"
require contrib/conf/include/gcc-compat.conf
IMAGE_CLASSES += "image_types_tegra"
IMAGE_FSTYPES = "tegraflash"
UBOOT_EXTLINUX_ROOT = "root=/dev/mmcblk0p1"
UBOOT_EXTLINUX_TIMEOUT ??= "100"
SECURITY_CFLAGS_pn-tini_append += " ${SECURITY_NOPIE_CFLAGS}"
NVIDIA_DEVNET_MIRROR = 'file:///home/dev/Downloads/nvidia/sdkm_r32_3_1'
CUDA_VERSION = "10.0"
CUDA_BINARIES_NATIVE = "cuda-binaries-ubuntu1804-native"
IMAGE_INSTALL_append += " cuda-samples cuda-samples-dev cuda-curand-staticdev cuda-cublas-staticdev cuda-cusparse-staticdev cuda-npp-staticdev freeglut libegl-mesa-dev libgl-mesa-dev libglu-dev libxmu-dev cudnn tensorrt tensorrt-samples tensorrt-dev opencv python3-opencv "
IMAGE_INSTALL_append += " git git-perltools dpkg gcc make cmake automake autoconf time valgrind "
IMAGE_INSTALL_append += " python3-pip python3 python3-modules python3-setuptools python3-venv "
IMAGE_INSTALL_append += " openssh-sshd openssh-scp e2fsprogs-resize2fs "
IMAGE_INSTALL_append += " i2c-tools can-utils spitools "
IMAGE_INSTALL_append += " libsdl2-dev "
IMAGE_INSTALL_append += " hdf5 zip "
IMAGE_INSTALL_append += " x11vnc "
IMAGE_INSTALL_append += " alsa-lib alsa-utils pulseaudio vlc  "
IMAGE_INSTALL_append += " boost ffmpeg chromium-x11 "
IMAGE_INSTALL_append += " linux-firmware iw bluez5 wpa-supplicant networkmanager ca-certificates lsb-release v4l-utils dhcp-client "
IMAGE_INSTALL_append += " python3-dev python3-kiwisolver python3-cycler python3-pyparsing python3-matplotlib python3-flask python3-protobuf python3-smbus python3-numpy python3-pillow python3-urllib3 python3-docopt python3-tornado python3-certifi python3-chardet python3-idna python3-requests python3-h5py python3-engineio python3-socketio python3-markupsafe python3-jinja2 python3-click python3-itsdangerous python3-werkzeug python3-dnspython python3-greenlet python3-eventlet python3-decorator python3-tqdm python3-dateutil python3-pytz python3-pandas python3-prettytable python3-paho-mqtt python3-spidev python3-pyserial "


DISTRO_FEATURES_append += " ldconfig openstack wifi bluetooth bluez5 x11 "
PREFERRED_PROVIDER_virtual/kernel = 'linux-tegra'
WRLINUX_SUPPORTED_RECIPE_pn-glog = '2'
WRLINUX_SUPPORTED_RECIPE_pn-libeigen = '2'
WRLINUX_SUPPORTED_RECIPE_pn-tbb = '2'
WRLINUX_SUPPORTED_RECIPE_pn-opencv = '2'
LICENSE_FLAGS_WHITELIST += " commercial commercial_libav commercial_x264 "

EXTRA_IMAGE_FEATURES += " tools-sdk "
distro_bootpart="1"
DISTRO_CODENAME ?= "alphaDrone"
WRTEMPLATE += " feature/xfce " 
INSANE_SKIP_libcxx = "installed-vs-shipped "
